{"version":3,"file":"static/js/387.4ed2ecb9.chunk.js","mappings":"8RAEaA,EAAiBC,EAAAA,GAAAA,GAAH,gLAWdC,EAAiBD,EAAAA,GAAAA,GAAH,2C,SC2D3B,EAlEa,WACX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,MAAjC,eAAOK,EAAP,KAAaC,EAAb,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WAAM,wCAKd,oGAEIL,GAAa,GAFjB,UAG4BM,EAAAA,EAAAA,IAAkBV,GAH9C,OAGUW,EAHV,OAIIH,EAAQG,EAAUJ,MAJtB,gDAMID,EAAS,KAAMM,SANnB,yBAQIR,GAAa,GARjB,6EALc,sBACTJ,GADS,mCAgBda,EACD,GAAE,CAACb,KAGF,2BACa,OAAVK,IAAkB,uBAAG,kDACrBF,IACC,SAAC,KAAD,CACEW,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,IAGH,OAATX,IACC,0BACE,SAACV,EAAD,UACGU,EAAKY,KAAI,SAAAC,GAAK,OACb,UAACrB,EAAD,WAC0B,OAAvBqB,EAAMC,cACL,gBACEC,IAAKF,EAAMG,KACXC,IAAI,yCAGN,gBACEF,IAAKF,EAAMG,KACXC,IAAG,wCAAmCJ,EAAMC,iBAIhD,uBAAID,EAAMG,QACV,uBAAIH,EAAMK,cAdSL,EAAMM,GADd,QAqBH,KAAb,OAAJnB,QAAI,IAAJA,OAAA,EAAAA,EAAMoB,UAAgB,uBAAG,6CAG/B,C,mMCpEKC,EAAW,6BACXC,EAAU,mCACVC,EAAU,CACZC,OAAQ,MACRC,QAAS,CACLC,OAAQ,mBACRC,cAAe,+NAKVC,EAAmB,mCAAG,sGACRC,EAAAA,EAAAA,IAAA,UAAaR,EAAb,wDAAqEC,GAAWC,GADxE,uBACvBO,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKnBC,EAAiB,mCAAG,WAAOtC,GAAP,yFACNoC,EAAAA,EAAAA,IAAA,UAAaR,EAAb,oBAAiC5B,EAAjC,mCAAmE6B,GAAWC,GADxE,uBACrBO,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,sDAMjB3B,EAAiB,mCAAG,WAAOV,GAAP,yFACNoC,EAAAA,EAAAA,IAAA,UAAaR,EAAb,oBAAiC5B,EAAjC,2CAA2E6B,GAAWC,GADhF,uBACrBO,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,sDAMjBE,EAAiB,mCAAG,WAAOvC,GAAP,yFACNoC,EAAAA,EAAAA,IAAA,UAAaR,EAAb,oBAAiC5B,EAAjC,2CAA2E6B,GAAWC,GADhF,uBACrBO,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,sDAMjBG,EAAgB,mCAAG,WAAOC,EAAOC,GAAd,yFACLN,EAAAA,EAAAA,IAAA,UAAaR,EAAb,iCAA8Ca,EAA9C,oDAA+FC,EAA/F,oBAA+Gb,GAAWC,GADrH,uBACpBO,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,uD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastListStyled = styled.ul`\nlist-style: none;\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: left;\ncolumn-gap: 30px;\nrow-gap: 10px;\ntext-align: center;\nmargin-top: 35px;\n`\n\nexport const CastItemStyled = styled.li`\nmax-width: 185px;\n`","import { fetchMovieCredits } from 'services/api';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { CastListStyled, CastItemStyled } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    async function movieCast() {\n      try {\n        setIsLoading(true);\n        const fetchCast = await fetchMovieCredits(movieId);\n        setCast(fetchCast.cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    movieCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      {error !== null && <p>Oops, something went wrong. please, try later</p>}\n      {isLoading && (\n        <RotatingLines\n          strokeColor=\"grey\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"96\"\n          visible={true}\n        />\n      )}\n      {cast !== null && (\n        <div>\n          <CastListStyled>\n            {cast.map(actor => (\n              <CastItemStyled key={actor.id}>\n                {actor.profile_path === null ? (\n                  <img\n                    alt={actor.name}\n                    src=\"https://via.placeholder.com/185x280\"\n                  />\n                ) : (\n                  <img\n                    alt={actor.name}\n                    src={`http://image.tmdb.org/t/p/w185${actor.profile_path}`}\n                  />\n                )}\n\n                <p>{actor.name}</p>\n                <p>{actor.character}</p>\n              </CastItemStyled>\n            ))}\n          </CastListStyled>\n        </div>\n      )}\n      {cast?.length === 0 && <p>We don't have any cast for this movie.</p>}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from \"axios\";\n\nconst BASE_URL = \"https://api.themoviedb.org\";\nconst API_KEY = 'b4322bdf3e2859ea67c5f11069df4ded';\nconst options = {\n    method: 'GET',\n    headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiNDMyMmJkZjNlMjg1OWVhNjdjNWYxMTA2OWRmNGRlZCIsInN1YiI6IjY0ZGNhYmJkYjc3ZDRiMTE0MzQ3NWI0NiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.CqbSGDQtmUw3a5Fq7RSi0CObHLk2zkAuH1e2KHzFsMQ'\n    }\n};\n\n\nexport const fetchTrendingMovies = async () => {\n    const { data } = await axios.get(`${BASE_URL}/3/trending/movie/day?language=en-US&api_key=${API_KEY}`, options);\n    return data;\n}\n\nexport const fetchMovieDetails = async (movieId) => {\n    const { data } = await axios.get(`${BASE_URL}/3/movie/${movieId}?language=en-US&api_key=${API_KEY}`, options);\n\n    return data;\n}\n\nexport const fetchMovieCredits = async (movieId) => {\n    const { data } = await axios.get(`${BASE_URL}/3/movie/${movieId}/credits?language=en-US&api_key=${API_KEY}`, options);\n\n    return data;\n}\n\nexport const fetchMovieReviews = async (movieId) => {\n    const { data } = await axios.get(`${BASE_URL}/3/movie/${movieId}/reviews?language=en-US&api_key=${API_KEY}`, options);\n\n    return data;\n}\n\nexport const fetchMovieSearch = async (query, page) => {\n    const { data } = await axios.get(`${BASE_URL}/3/search/movie?query=${query}&include_adult=false&language=en-US&page=${page}&api_key=${API_KEY}`, options);\n    return data;\n}\n"],"names":["CastListStyled","styled","CastItemStyled","movieId","useParams","useState","isLoading","setIsLoading","error","setError","cast","setCast","useEffect","fetchMovieCredits","fetchCast","message","movieCast","strokeColor","strokeWidth","animationDuration","width","visible","map","actor","profile_path","alt","name","src","character","id","length","BASE_URL","API_KEY","options","method","headers","accept","Authorization","fetchTrendingMovies","axios","data","fetchMovieDetails","fetchMovieReviews","fetchMovieSearch","query","page"],"sourceRoot":""}